/**
 * App: SQL Generation Agent
 * Package: db.migrations
 * File: 01_customer_profile_tables.sql
 * Version: 0.1.0
 * Turns: 1
 * Author: AI Agent
 * Date: 2025-10-23T05:20:20Z
 * Exports: customer_profile schema objects
 * Description: Creates normalized PostgreSQL tables, types, indexes, and views for the Customer Profile domain.
 */

BEGIN;

CREATE SCHEMA IF NOT EXISTS customer_profile;
SET search_path TO customer_profile, public;

DO $$
BEGIN
    CREATE TYPE phone_number_type AS ENUM ('mobile', 'home', 'work', 'other');
EXCEPTION
    WHEN duplicate_object THEN NULL;
END;
$$;

CREATE TABLE IF NOT EXISTS postal_address (
    address_id        BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    line1             VARCHAR(255) NOT NULL,
    line2             VARCHAR(255),
    city              VARCHAR(100) NOT NULL,
    state             VARCHAR(100) NOT NULL,
    postal_code       VARCHAR(20),
    country           CHAR(2) NOT NULL,
    CONSTRAINT postal_address_country_chk CHECK (char_length(country) = 2)
);

CREATE TABLE IF NOT EXISTS privacy_settings (
    privacy_settings_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    marketing_emails_enabled BOOLEAN NOT NULL,
    two_factor_enabled       BOOLEAN NOT NULL
);

CREATE TABLE IF NOT EXISTS customer (
    customer_id         UUID PRIMARY KEY,
    first_name          VARCHAR(255) NOT NULL,
    middle_name         VARCHAR(255),
    last_name           VARCHAR(255) NOT NULL,
    address_id          BIGINT REFERENCES postal_address(address_id) ON DELETE SET NULL,
    privacy_settings_id BIGINT REFERENCES privacy_settings(privacy_settings_id) ON DELETE SET NULL,
    created_at          TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at          TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    CONSTRAINT customer_full_name_chk CHECK (char_length(first_name) > 0 AND char_length(last_name) > 0)
);

CREATE TABLE IF NOT EXISTS customer_email (
    customer_email_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id       UUID NOT NULL REFERENCES customer(customer_id) ON DELETE CASCADE,
    email             VARCHAR(320) NOT NULL,
    is_primary        BOOLEAN NOT NULL DEFAULT FALSE,
    created_at        TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    CONSTRAINT customer_email_customer_email_uk UNIQUE (customer_id, email)
);

CREATE TABLE IF NOT EXISTS customer_phone_number (
    customer_phone_number_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id              UUID NOT NULL REFERENCES customer(customer_id) ON DELETE CASCADE,
    phone_type               phone_number_type NOT NULL,
    phone_number             VARCHAR(16) NOT NULL,
    created_at               TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    CONSTRAINT customer_phone_number_format_chk CHECK (phone_number ~ '^\+[1-9][0-9]{1,14}$'),
    CONSTRAINT customer_phone_number_unique_per_customer UNIQUE (customer_id, phone_number)
);

CREATE UNIQUE INDEX IF NOT EXISTS ux_customer_email_lower
    ON customer_email (customer_id, LOWER(email));

CREATE INDEX IF NOT EXISTS idx_customer_address_id
    ON customer (address_id);

CREATE INDEX IF NOT EXISTS idx_customer_privacy_settings_id
    ON customer (privacy_settings_id);

CREATE INDEX IF NOT EXISTS idx_customer_email_customer_id
    ON customer_email (customer_id);

CREATE INDEX IF NOT EXISTS idx_customer_phone_customer_id
    ON customer_phone_number (customer_id);

CREATE OR REPLACE VIEW customer_profile_overview AS
SELECT
    c.customer_id,
    c.first_name,
    c.middle_name,
    c.last_name,
    pa.line1,
    pa.line2,
    pa.city,
    pa.state,
    pa.postal_code,
    pa.country,
    ps.marketing_emails_enabled,
    ps.two_factor_enabled,
    COALESCE(jsonb_agg(DISTINCT jsonb_build_object('email', ce.email, 'is_primary', ce.is_primary))
             FILTER (WHERE ce.customer_email_id IS NOT NULL), '[]'::jsonb) AS emails,
    COALESCE(jsonb_agg(DISTINCT jsonb_build_object('type', cpn.phone_type, 'number', cpn.phone_number))
             FILTER (WHERE cpn.customer_phone_number_id IS NOT NULL), '[]'::jsonb) AS phone_numbers
FROM customer c
LEFT JOIN postal_address pa ON pa.address_id = c.address_id
LEFT JOIN privacy_settings ps ON ps.privacy_settings_id = c.privacy_settings_id
LEFT JOIN customer_email ce ON ce.customer_id = c.customer_id
LEFT JOIN customer_phone_number cpn ON cpn.customer_id = c.customer_id
GROUP BY
    c.customer_id,
    pa.address_id,
    ps.privacy_settings_id;

COMMENT ON TABLE customer IS 'Customer core entity derived from CustomerProfile JSON schema.';
COMMENT ON TABLE postal_address IS 'Postal address reference table supporting customers.';
COMMENT ON TABLE privacy_settings IS 'Privacy preferences for customers.';
COMMENT ON TABLE customer_email IS 'Email addresses linked to customers.';
COMMENT ON TABLE customer_phone_number IS 'Phone numbers linked to customers.';

COMMENT ON VIEW customer_profile_overview IS 'Flattened view of customer profiles including emails and phone numbers.';

COMMIT;
