# /**
#  * App: SQL-Generation-Agent
#  * Package: docker
#  * File: docker-compose.yml
#  * Version: 0.1.0
#  * Turns: 1
#  * Author: AI Coding Agent
#  * Date: 2025-10-22T19:17:11Z
#  * Exports: Multi-dialect database sandbox
#  * Description: Defines Docker Compose services for every supported SQL dialect.
#  */
version: "3.9"

services:
  postgresql-db:
    build:
      context: ./docker/postgresql
    container_name: postgresql-db
    profiles: ["postgresql"]
    env_file:
      - ./.env.postgresql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - ./db:/workspace/db:ro
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:-postgres}", "-d", "${POSTGRES_DB:-customer_profile}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  mysql-db:
    build:
      context: ./docker/mysql
    container_name: mysql-db
    command: ["mysqld", "--default-authentication-plugin=mysql_native_password"]
    profiles: ["mysql"]
    env_file:
      - ./.env.mysql
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - ./db:/workspace/db:ro
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${MYSQL_USER:-dev}", "-p${MYSQL_PASSWORD:-devpass}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  mariadb-db:
    build:
      context: ./docker/mariadb
    container_name: mariadb-db
    profiles: ["mariadb"]
    env_file:
      - ./.env.mariadb
    ports:
      - "${MARIADB_PORT:-3307}:3306"
    volumes:
      - ./db:/workspace/db:ro
    healthcheck:
      test: ["CMD", "mariadb-admin", "ping", "-h", "localhost", "-u", "${MARIADB_USER:-dev}", "-p${MARIADB_PASSWORD:-devpass}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  mssql-db:
    build:
      context: ./docker/mssql
    container_name: mssql-db
    profiles: ["mssql"]
    env_file:
      - ./.env.mssql
    ports:
      - "${MSSQL_PORT:-1433}:1433"
    volumes:
      - ./db:/workspace/db:ro
    healthcheck:
      test: ["CMD", "/opt/mssql-tools/bin/sqlcmd", "-S", "localhost", "-U", "sa", "-P", "${MSSQL_SA_PASSWORD:-LocalStrongPassw0rd!}", "-Q", "SELECT 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 40s

  sqlite-db:
    build:
      context: ./docker/sqlite
    container_name: sqlite-db
    profiles: ["sqlite"]
    volumes:
      - ./db/sqlite:/workspace/db/sqlite
    stdin_open: true
    tty: true

  duckdb-db:
    build:
      context: ./docker/duckdb
    container_name: duckdb-db
    profiles: ["duckdb"]
    volumes:
      - ./db/duckdb:/workspace/db/duckdb
    stdin_open: true
    tty: true

  oracle-db:
    build:
      context: ./docker/oracle
    container_name: oracle-db
    profiles: ["oracle"]
    env_file:
      - ./.env.oracle
    ports:
      - "${ORACLE_PORT:-1521}:1521"
    volumes:
      - ./db:/workspace/db:ro

  snowflake-cli:
    build:
      context: ./docker/snowflake
    container_name: snowflake-cli
    profiles: ["snowflake"]
    env_file:
      - ./.env.snowflake
    volumes:
      - ./db:/workspace/db:ro
    entrypoint: ["snow"]
    command: ["--help"]

  bigquery-emulator:
    build:
      context: ./docker/bigquery
    container_name: bigquery-emulator
    profiles: ["bigquery"]
    env_file:
      - ./.env.bigquery
    ports:
      - "${BIGQUERY_PORT:-9050}:9050"
    volumes:
      - ./db:/workspace/db:ro
