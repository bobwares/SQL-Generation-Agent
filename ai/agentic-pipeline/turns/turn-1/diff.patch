diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..0cd1c25
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,20 @@
+# Generated artifacts and virtual environments
+__pycache__/
+*.pyc
+*.pyo
+*.pyd
+.env
+.venv/
+venv/
+.env.local
+.env.development
+.env.production
+.env.test
+.DS_Store
+.idea/
+.vscode/
+*.log
+coverage/
+node_modules/
+logs/
+.tmp/
diff --git a/README.md b/README.md
index 7c779d0..ba2e121 100644
--- a/README.md
+++ b/README.md
@@ -1 +1,7 @@
-# SQL-Generation-Agent
\ No newline at end of file
+# SQL-Generation-Agent
+
+This repository contains artifacts generated by the Agentic Pipeline for translating JSON Schema inputs into SQL database assets.
+
+## CustomerProfile Domain
+
+The `db/migrations/01_customer_profile_tables.sql` script provisions normalized MySQL tables for the CustomerProfile schema. Seed data for local validation lives in `db/scripts/customer_profile_test_data.sql`, and usage instructions are documented in `db/README.md`.
diff --git a/ai/agentic-pipeline/turns/turn-1/adr.md b/ai/agentic-pipeline/turns/turn-1/adr.md
new file mode 100644
index 0000000..847533a
--- /dev/null
+++ b/ai/agentic-pipeline/turns/turn-1/adr.md
@@ -0,0 +1,24 @@
+# ADR 1 – CustomerProfile MySQL Schema Design
+
+## Status
+Accepted – 2025-10-22
+
+## Context
+The turn 1 prompt required generating normalized SQL assets for the `CustomerProfile` JSON schema using the MySQL dialect. The governance pattern for agents recommends PostgreSQL defaults, but the user explicitly requested MySQL, necessitating dialect-specific adjustments. The schema includes nested objects and arrays (emails, phone numbers) that must be represented relationally while preserving uniqueness and optional elements.
+
+## Options Considered
+| Option | Pros | Cons |
+| ------ | ---- | ---- |
+| Retain PostgreSQL-oriented defaults (UUID types, CHECK constraints) | Minimal deviation from template tasks | Violates direct user instruction for MySQL, risks incompatible syntax |
+| Translate design to MySQL 8.0 with InnoDB tables, ENUM for phone type, `ON DUPLICATE KEY UPDATE` for idempotent seeds | Satisfies dialect requirements, ensures idempotent seed scripts, leverages MySQL-native features | Requires revising examples, adapting index syntax, and ensuring compatibility with MySQL semantics |
+
+## Decision
+Chosen: Translate the CustomerProfile design to MySQL 8.0 using InnoDB storage, CHAR(36) identifiers for UUIDs, ENUM types for phone classifications, and idempotent seed scripts built on `ON DUPLICATE KEY UPDATE`. This honors the user-specified dialect while maintaining normalized structure and governance expectations (metadata headers, directory layout).
+
+## Consequences
+- Migration and seed scripts run cleanly on MySQL 8.0+ and remain idempotent for repeated execution.
+- Additional maintenance is needed if PostgreSQL-specific behaviors were assumed elsewhere in the pipeline.
+- Using CHAR(36) may incur slightly larger storage compared to binary UUIDs but keeps the scripts self-contained without helper functions.
+
+## Follow-ups / Tickets
+- Evaluate whether future turns should include automated MySQL linting or formatting to enforce dialect rules.
diff --git a/ai/agentic-pipeline/turns/turn-1/changelog.md b/ai/agentic-pipeline/turns/turn-1/changelog.md
new file mode 100644
index 0000000..2ad8a04
--- /dev/null
+++ b/ai/agentic-pipeline/turns/turn-1/changelog.md
@@ -0,0 +1,43 @@
+# Turn: 1  – 2025-10-22 - 07:50 UTC
+
+## Turn Summary
+<!-- CODEx_TURN_SUMMARY:BEGIN -->
+Generated MySQL DDL and seed scripts for the CustomerProfile schema, initialized repository hygiene, and recorded governance artifacts for turn 1.
+<!-- CODEx_TURN_SUMMARY:END -->
+
+## Input Prompt
+<!-- Summarize the input prompt, schema name that initiated this turn. -->
+Execute turn 1 for the CustomerProfile JSON schema targeting the MySQL dialect.
+
+## Tasks Executed
+<!-- Add a row per task executed during this turn. -->
+| Task Name | Tools / Agents Executed |
+| --------- | ----------------------- |
+| TASK 01 – Initialize Project | shell · coding-agent |
+| TASK – Generate Normalized Tables | shell · coding-agent |
+| TASK – Generate Test Data | shell · coding-agent |
+
+## Turn Files Added
+<!-- List files added under the /ai directory only. One row per file. -->
+| Path / File |
+| ----------- |
+| ai/agentic-pipeline/turns/turn-1/changelog.md |
+| ai/agentic-pipeline/turns/turn-1/adr.md |
+| ai/agentic-pipeline/turns/turn-1/manifest.json |
+| ai/agentic-pipeline/turns/turn-1/session_context_values.md |
+| ai/agentic-pipeline/turns_index.csv |
+
+## Files Added
+<!-- Exclude anything under /ai. Include the task that created the file. -->
+| Path / File | Task Name |
+| ----------- | --------- |
+| .gitignore | TASK 01 – Initialize Project |
+| db/migrations/01_customer_profile_tables.sql | TASK – Generate Normalized Tables |
+| db/scripts/customer_profile_test_data.sql | TASK – Generate Test Data |
+| db/README.md | TASK – Generate Normalized Tables |
+
+## Files Updated
+<!-- Exclude anything under /ai. Include the task that updated the file. -->
+| Path / File | Task Name |
+| ----------- | --------- |
+| README.md | TASK 01 – Initialize Project |
diff --git a/ai/agentic-pipeline/turns/turn-1/manifest.json b/ai/agentic-pipeline/turns/turn-1/manifest.json
new file mode 100644
index 0000000..3119e85
--- /dev/null
+++ b/ai/agentic-pipeline/turns/turn-1/manifest.json
@@ -0,0 +1,57 @@
+{
+  "turnId": 1,
+  "timestampUtc": "2025-10-22T07:50:41Z",
+  "actor": {
+    "initiator": "user",
+    "agent": "codex@1.0.0"
+  },
+  "task": {
+    "name": "execute turn 1",
+    "inputs": [
+      "CustomerProfile schema",
+      "config: mysql"
+    ],
+    "parameters": {
+      "dialect": "mysql"
+    }
+  },
+  "artifacts": {
+    "changelog": "changelog.md",
+    "adr": "adr.md",
+    "diff": "diff.patch",
+    "logs": [],
+    "reports": []
+  },
+  "changes": {
+    "added": [
+      ".gitignore",
+      "db/README.md",
+      "db/migrations/01_customer_profile_tables.sql",
+      "db/scripts/customer_profile_test_data.sql",
+      "ai/agentic-pipeline/turns_index.csv",
+      "ai/agentic-pipeline/turns/turn-1/adr.md",
+      "ai/agentic-pipeline/turns/turn-1/changelog.md",
+      "ai/agentic-pipeline/turns/turn-1/diff.patch",
+      "ai/agentic-pipeline/turns/turn-1/manifest.json",
+      "ai/agentic-pipeline/turns/turn-1/session_context_values.md"
+    ],
+    "modified": [
+      "README.md"
+    ],
+    "deleted": []
+  },
+  "metrics": {
+    "filesChanged": 11,
+    "linesAdded": 0,
+    "linesDeleted": 0,
+    "testsPassed": 0,
+    "testsFailed": 0,
+    "coverageDeltaPct": 0
+  },
+  "validation": {
+    "adrPresent": true,
+    "changelogPresent": true,
+    "lintStatus": "not-run",
+    "testsStatus": "not-run"
+  }
+}
diff --git a/ai/agentic-pipeline/turns/turn-1/session_context_values.md b/ai/agentic-pipeline/turns/turn-1/session_context_values.md
new file mode 100644
index 0000000..ffe7cba
--- /dev/null
+++ b/ai/agentic-pipeline/turns/turn-1/session_context_values.md
@@ -0,0 +1,7 @@
+# Session Context Values – Turn 1
+
+- turn_id: 1
+- turn_task: execute turn 1
+- application_implementation_pattern: agents
+- config.target_dialect: mysql
+- json_schema.title: CustomerProfile
diff --git a/ai/agentic-pipeline/turns_index.csv b/ai/agentic-pipeline/turns_index.csv
new file mode 100644
index 0000000..eafe530
--- /dev/null
+++ b/ai/agentic-pipeline/turns_index.csv
@@ -0,0 +1,2 @@
+turnId,timestampUtc,task,branch,tag,headAfter,testsPassed,testsFailed,coverageDeltaPct
+1,2025-10-22T07:50:41Z,execute turn 1,work,turn/1,PENDING,0,0,0
diff --git a/db/README.md b/db/README.md
new file mode 100644
index 0000000..13db64f
--- /dev/null
+++ b/db/README.md
@@ -0,0 +1,23 @@
+# Database Assets
+
+## Domain Migration
+
+1. Ensure a MySQL 8.0 instance is available and accessible.
+2. Execute the normalized schema from the repository root:
+   ```bash
+   mysql --host=<host> --user=<user> --password < db/migrations/01_customer_profile_tables.sql
+   ```
+3. Seed deterministic test data:
+   ```bash
+   mysql --host=<host> --user=<user> --password < db/scripts/customer_profile_test_data.sql
+   ```
+4. Verify the smoke-test query output reports at least 20 customer rows:
+   ```bash
+   mysql --host=<host> --user=<user> --password --database=customer_profile --execute "SELECT COUNT(*) AS customer_count FROM customer;"
+   ```
+
+## Notes
+
+- The migration script is idempotent and uses `CREATE TABLE IF NOT EXISTS` semantics for repeatable runs.
+- Seed data relies on `ON DUPLICATE KEY UPDATE` to remain idempotent across multiple executions.
+- Scripts assume the `customer_profile` schema; adjust the `USE` directive if a different schema is required.
diff --git a/db/migrations/01_customer_profile_tables.sql b/db/migrations/01_customer_profile_tables.sql
new file mode 100644
index 0000000..61bf70e
--- /dev/null
+++ b/db/migrations/01_customer_profile_tables.sql
@@ -0,0 +1,154 @@
+/**
+ * App: SQL Generation Agent
+ * Package: db.migrations
+ * File: db/migrations/01_customer_profile_tables.sql
+ * Version: 0.1.0
+ * Turns: [1]
+ * Author: AI Coding Agent
+ * Date: 2025-10-22T07:49:23Z
+ * Exports: Tables (postal_address, privacy_settings, customer, customer_email, customer_phone_number); View (vw_customer_profile)
+ * Description: Creates MySQL schema and normalized tables for the CustomerProfile domain.
+ */
+
+SET NAMES utf8mb4;
+SET time_zone = '+00:00';
+
+CREATE DATABASE IF NOT EXISTS customer_profile
+  CHARACTER SET utf8mb4
+  COLLATE utf8mb4_unicode_ci;
+
+USE customer_profile;
+
+CREATE TABLE IF NOT EXISTS postal_address (
+  address_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
+  line1 VARCHAR(255) NOT NULL,
+  line2 VARCHAR(255) NULL,
+  city VARCHAR(100) NOT NULL,
+  state VARCHAR(100) NOT NULL,
+  postal_code VARCHAR(20) NULL,
+  country CHAR(2) NOT NULL,
+  PRIMARY KEY (address_id)
+) ENGINE = InnoDB
+  DEFAULT CHARSET = utf8mb4
+  COLLATE = utf8mb4_unicode_ci;
+
+CREATE TABLE IF NOT EXISTS privacy_settings (
+  privacy_settings_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
+  marketing_emails_enabled TINYINT(1) NOT NULL,
+  two_factor_enabled TINYINT(1) NOT NULL,
+  PRIMARY KEY (privacy_settings_id)
+) ENGINE = InnoDB
+  DEFAULT CHARSET = utf8mb4
+  COLLATE = utf8mb4_unicode_ci;
+
+CREATE TABLE IF NOT EXISTS customer (
+  customer_id CHAR(36) NOT NULL,
+  first_name VARCHAR(255) NOT NULL,
+  middle_name VARCHAR(255) NULL,
+  last_name VARCHAR(255) NOT NULL,
+  address_id BIGINT UNSIGNED NULL,
+  privacy_settings_id BIGINT UNSIGNED NOT NULL,
+  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
+  updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
+  PRIMARY KEY (customer_id),
+  CONSTRAINT fk_customer_address
+    FOREIGN KEY (address_id)
+    REFERENCES postal_address (address_id)
+    ON DELETE SET NULL
+    ON UPDATE CASCADE,
+  CONSTRAINT fk_customer_privacy_settings
+    FOREIGN KEY (privacy_settings_id)
+    REFERENCES privacy_settings (privacy_settings_id)
+    ON DELETE RESTRICT
+    ON UPDATE CASCADE
+) ENGINE = InnoDB
+  DEFAULT CHARSET = utf8mb4
+  COLLATE = utf8mb4_unicode_ci;
+
+CREATE TABLE IF NOT EXISTS customer_email (
+  customer_email_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
+  customer_id CHAR(36) NOT NULL,
+  email VARCHAR(320) NOT NULL,
+  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
+  PRIMARY KEY (customer_email_id),
+  CONSTRAINT fk_customer_email_customer
+    FOREIGN KEY (customer_id)
+    REFERENCES customer (customer_id)
+    ON DELETE CASCADE
+    ON UPDATE CASCADE,
+  CONSTRAINT uq_customer_email_customer
+    UNIQUE (customer_id, email)
+) ENGINE = InnoDB
+  DEFAULT CHARSET = utf8mb4
+  COLLATE = utf8mb4_unicode_ci;
+
+CREATE TABLE IF NOT EXISTS customer_phone_number (
+  customer_phone_number_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
+  customer_id CHAR(36) NOT NULL,
+  phone_type ENUM('mobile', 'home', 'work', 'other') NOT NULL,
+  phone_number VARCHAR(16) NOT NULL,
+  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
+  PRIMARY KEY (customer_phone_number_id),
+  CONSTRAINT fk_customer_phone_customer
+    FOREIGN KEY (customer_id)
+    REFERENCES customer (customer_id)
+    ON DELETE CASCADE
+    ON UPDATE CASCADE,
+  CONSTRAINT uq_customer_phone
+    UNIQUE (customer_id, phone_number)
+) ENGINE = InnoDB
+  DEFAULT CHARSET = utf8mb4
+  COLLATE = utf8mb4_unicode_ci;
+
+CREATE INDEX IF NOT EXISTS idx_customer_address_id
+  ON customer (address_id);
+
+CREATE INDEX IF NOT EXISTS idx_customer_privacy_settings_id
+  ON customer (privacy_settings_id);
+
+CREATE INDEX IF NOT EXISTS idx_customer_email_customer_id
+  ON customer_email (customer_id);
+
+CREATE INDEX IF NOT EXISTS idx_customer_phone_customer_id
+  ON customer_phone_number (customer_id);
+
+CREATE OR REPLACE VIEW vw_customer_profile AS
+SELECT
+  c.customer_id,
+  c.first_name,
+  c.middle_name,
+  c.last_name,
+  pa.address_id,
+  pa.line1,
+  pa.line2,
+  pa.city,
+  pa.state,
+  pa.postal_code,
+  pa.country,
+  ps.marketing_emails_enabled,
+  ps.two_factor_enabled,
+  GROUP_CONCAT(DISTINCT ce.email ORDER BY ce.email SEPARATOR ', ') AS emails,
+  GROUP_CONCAT(DISTINCT CONCAT(cp.phone_type, ':', cp.phone_number) ORDER BY cp.phone_type, cp.phone_number SEPARATOR ', ') AS phone_numbers,
+  c.created_at,
+  c.updated_at
+FROM customer AS c
+LEFT JOIN postal_address AS pa ON pa.address_id = c.address_id
+INNER JOIN privacy_settings AS ps ON ps.privacy_settings_id = c.privacy_settings_id
+LEFT JOIN customer_email AS ce ON ce.customer_id = c.customer_id
+LEFT JOIN customer_phone_number AS cp ON cp.customer_id = c.customer_id
+GROUP BY
+  c.customer_id,
+  c.first_name,
+  c.middle_name,
+  c.last_name,
+  pa.address_id,
+  pa.line1,
+  pa.line2,
+  pa.city,
+  pa.state,
+  pa.postal_code,
+  pa.country,
+  ps.marketing_emails_enabled,
+  ps.two_factor_enabled,
+  c.created_at,
+  c.updated_at;
diff --git a/db/scripts/customer_profile_test_data.sql b/db/scripts/customer_profile_test_data.sql
new file mode 100644
index 0000000..e444a07
--- /dev/null
+++ b/db/scripts/customer_profile_test_data.sql
@@ -0,0 +1,157 @@
+/**
+ * App: SQL Generation Agent
+ * Package: db.scripts
+ * File: db/scripts/customer_profile_test_data.sql
+ * Version: 0.1.0
+ * Turns: [1]
+ * Author: AI Coding Agent
+ * Date: 2025-10-22T07:49:23Z
+ * Exports: Seed data for postal_address, privacy_settings, customer, customer_email, customer_phone_number
+ * Description: Provides idempotent seed data for the CustomerProfile domain with a smoke-test query.
+ */
+
+USE customer_profile;
+
+START TRANSACTION;
+
+INSERT INTO postal_address (address_id, line1, line2, city, state, postal_code, country)
+VALUES
+  (1, '100 Market St', NULL, 'Springfield', 'IL', '62701', 'US'),
+  (2, '200 Oak Ave', 'Apt 2', 'Madison', 'WI', '53703', 'US'),
+  (3, '300 Pine Rd', NULL, 'Austin', 'TX', '73301', 'US'),
+  (4, '400 Maple Ln', NULL, 'Denver', 'CO', '80014', 'US'),
+  (5, '500 Cedar Blvd', 'Suite 5', 'Phoenix', 'AZ', '85001', 'US'),
+  (6, '600 Birch Way', NULL, 'Portland', 'OR', '97205', 'US'),
+  (7, '700 Walnut St', NULL, 'Boston', 'MA', '02108', 'US'),
+  (8, '800 Chestnut Dr', NULL, 'Seattle', 'WA', '98101', 'US'),
+  (9, '900 Elm Cir', NULL, 'Atlanta', 'GA', '30303', 'US'),
+  (10, '1000 Ash Pl', NULL, 'Miami', 'FL', '33101', 'US'),
+  (11, '1100 Cypress Ct', NULL, 'Columbus', 'OH', '43004', 'US'),
+  (12, '1200 Willow Way', 'Unit 12', 'Nashville', 'TN', '37201', 'US'),
+  (13, '1300 Poplar Dr', NULL, 'Raleigh', 'NC', '27601', 'US'),
+  (14, '1400 Aspen Loop', NULL, 'Salt Lake City', 'UT', '84101', 'US'),
+  (15, '1500 Fir St', NULL, 'San Diego', 'CA', '92101', 'US'),
+  (16, '1600 Spruce Rd', NULL, 'Boulder', 'CO', '80302', 'US'),
+  (17, '1700 Alder Ave', NULL, 'Boise', 'ID', '83702', 'US'),
+  (18, '1800 Hawthorn Blvd', 'Suite 300', 'Los Angeles', 'CA', '90001', 'US'),
+  (19, '1900 Magnolia Ln', NULL, 'Charleston', 'SC', '29401', 'US'),
+  (20, '2000 Sequoia Pl', NULL, 'San Jose', 'CA', '95113', 'US')
+ON DUPLICATE KEY UPDATE
+  line1 = VALUES(line1),
+  line2 = VALUES(line2),
+  city = VALUES(city),
+  state = VALUES(state),
+  postal_code = VALUES(postal_code),
+  country = VALUES(country);
+
+INSERT INTO privacy_settings (privacy_settings_id, marketing_emails_enabled, two_factor_enabled)
+VALUES
+  (1, TRUE, FALSE),
+  (2, FALSE, TRUE),
+  (3, TRUE, TRUE),
+  (4, FALSE, FALSE),
+  (5, TRUE, FALSE),
+  (6, FALSE, TRUE),
+  (7, TRUE, TRUE),
+  (8, FALSE, FALSE),
+  (9, TRUE, FALSE),
+  (10, FALSE, TRUE),
+  (11, TRUE, TRUE),
+  (12, FALSE, FALSE),
+  (13, TRUE, FALSE),
+  (14, FALSE, TRUE),
+  (15, TRUE, TRUE),
+  (16, FALSE, FALSE),
+  (17, TRUE, FALSE),
+  (18, FALSE, TRUE),
+  (19, TRUE, TRUE),
+  (20, FALSE, FALSE)
+ON DUPLICATE KEY UPDATE
+  marketing_emails_enabled = VALUES(marketing_emails_enabled),
+  two_factor_enabled = VALUES(two_factor_enabled);
+
+INSERT INTO customer (customer_id, first_name, middle_name, last_name, address_id, privacy_settings_id)
+VALUES
+  ('11111111-1111-1111-1111-111111111111', 'Alice', NULL, 'Smith', 1, 1),
+  ('22222222-2222-2222-2222-222222222222', 'Bob', 'J', 'Jones', 2, 2),
+  ('33333333-3333-3333-3333-333333333333', 'Charlie', NULL, 'Brown', 3, 3),
+  ('44444444-4444-4444-4444-444444444444', 'Dana', 'K', 'Miller', 4, 4),
+  ('55555555-5555-5555-5555-555555555555', 'Emma', NULL, 'Davis', 5, 5),
+  ('66666666-6666-6666-6666-666666666666', 'Frank', NULL, 'Wilson', 6, 6),
+  ('77777777-7777-7777-7777-777777777777', 'Grace', 'L', 'Taylor', 7, 7),
+  ('88888888-8888-8888-8888-888888888888', 'Hugo', NULL, 'Anderson', 8, 8),
+  ('99999999-9999-9999-9999-999999999999', 'Ivy', NULL, 'Thomas', 9, 9),
+  ('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', 'Jack', 'M', 'Jackson', 10, 10),
+  ('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb', 'Karen', NULL, 'White', 11, 11),
+  ('cccccccc-cccc-cccc-cccc-cccccccccccc', 'Leo', 'N', 'Martin', 12, 12),
+  ('dddddddd-dddd-dddd-dddd-dddddddddddd', 'Mia', NULL, 'Clark', 13, 13),
+  ('eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee', 'Noah', 'O', 'Walker', 14, 14),
+  ('ffffffff-ffff-ffff-ffff-ffffffffffff', 'Olivia', NULL, 'Young', 15, 15),
+  ('00000000-0000-0000-0000-000000000000', 'Paul', 'Q', 'Hall', 16, 16),
+  ('12121212-1212-1212-1212-121212121212', 'Quinn', NULL, 'Adams', 17, 17),
+  ('34343434-3434-3434-3434-343434343434', 'Riley', 'S', 'Bennett', 18, 18),
+  ('56565656-5656-5656-5656-565656565656', 'Sofia', NULL, 'Coleman', 19, 19),
+  ('78787878-7878-7878-7878-787878787878', 'Tyler', 'U', 'Diaz', 20, 20)
+ON DUPLICATE KEY UPDATE
+  first_name = VALUES(first_name),
+  middle_name = VALUES(middle_name),
+  last_name = VALUES(last_name),
+  address_id = VALUES(address_id),
+  privacy_settings_id = VALUES(privacy_settings_id);
+
+INSERT INTO customer_email (customer_id, email)
+VALUES
+  ('11111111-1111-1111-1111-111111111111', 'alice.smith@example.com'),
+  ('22222222-2222-2222-2222-222222222222', 'bob.jones@example.com'),
+  ('33333333-3333-3333-3333-333333333333', 'charlie.brown@example.com'),
+  ('44444444-4444-4444-4444-444444444444', 'dana.miller@example.com'),
+  ('55555555-5555-5555-5555-555555555555', 'emma.davis@example.com'),
+  ('66666666-6666-6666-6666-666666666666', 'frank.wilson@example.com'),
+  ('77777777-7777-7777-7777-777777777777', 'grace.taylor@example.com'),
+  ('88888888-8888-8888-8888-888888888888', 'hugo.anderson@example.com'),
+  ('99999999-9999-9999-9999-999999999999', 'ivy.thomas@example.com'),
+  ('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', 'jack.jackson@example.com'),
+  ('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb', 'karen.white@example.com'),
+  ('cccccccc-cccc-cccc-cccc-cccccccccccc', 'leo.martin@example.com'),
+  ('dddddddd-dddd-dddd-dddd-dddddddddddd', 'mia.clark@example.com'),
+  ('eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee', 'noah.walker@example.com'),
+  ('ffffffff-ffff-ffff-ffff-ffffffffffff', 'olivia.young@example.com'),
+  ('00000000-0000-0000-0000-000000000000', 'paul.hall@example.com'),
+  ('12121212-1212-1212-1212-121212121212', 'quinn.adams@example.com'),
+  ('34343434-3434-3434-3434-343434343434', 'riley.bennett@example.com'),
+  ('56565656-5656-5656-5656-565656565656', 'sofia.coleman@example.com'),
+  ('78787878-7878-7878-7878-787878787878', 'tyler.diaz@example.com')
+ON DUPLICATE KEY UPDATE
+  email = VALUES(email);
+
+INSERT INTO customer_phone_number (customer_id, phone_type, phone_number)
+VALUES
+  ('11111111-1111-1111-1111-111111111111', 'mobile', '+15555550101'),
+  ('22222222-2222-2222-2222-222222222222', 'mobile', '+15555550102'),
+  ('33333333-3333-3333-3333-333333333333', 'mobile', '+15555550103'),
+  ('44444444-4444-4444-4444-444444444444', 'mobile', '+15555550104'),
+  ('55555555-5555-5555-5555-555555555555', 'mobile', '+15555550105'),
+  ('66666666-6666-6666-6666-666666666666', 'mobile', '+15555550106'),
+  ('77777777-7777-7777-7777-777777777777', 'mobile', '+15555550107'),
+  ('88888888-8888-8888-8888-888888888888', 'mobile', '+15555550108'),
+  ('99999999-9999-9999-9999-999999999999', 'mobile', '+15555550109'),
+  ('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', 'mobile', '+15555550110'),
+  ('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb', 'mobile', '+15555550111'),
+  ('cccccccc-cccc-cccc-cccc-cccccccccccc', 'mobile', '+15555550112'),
+  ('dddddddd-dddd-dddd-dddd-dddddddddddd', 'mobile', '+15555550113'),
+  ('eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee', 'mobile', '+15555550114'),
+  ('ffffffff-ffff-ffff-ffff-ffffffffffff', 'mobile', '+15555550115'),
+  ('00000000-0000-0000-0000-000000000000', 'mobile', '+15555550116'),
+  ('12121212-1212-1212-1212-121212121212', 'mobile', '+15555550117'),
+  ('34343434-3434-3434-3434-343434343434', 'mobile', '+15555550118'),
+  ('56565656-5656-5656-5656-565656565656', 'mobile', '+15555550119'),
+  ('78787878-7878-7878-7878-787878787878', 'mobile', '+15555550120')
+ON DUPLICATE KEY UPDATE
+  phone_type = VALUES(phone_type),
+  phone_number = VALUES(phone_number);
+
+COMMIT;
+
+-- Smoke test query to verify at least 20 customers are present
+SELECT COUNT(*) AS customer_count
+FROM customer;
