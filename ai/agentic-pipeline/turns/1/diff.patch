diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..273ee2d
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,25 @@
+# Binaries and build artifacts
+/build/
+/dist/
+*.log
+*.tmp
+*.swp
+
+# Python
+__pycache__/
+*.py[cod]
+.venv/
+
+# Node
+node_modules/
+
+# Environment
+.env
+.env.*
+
+# macOS
+.DS_Store
+
+# Editor settings
+.idea/
+.vscode/
diff --git a/AGENTS.md b/AGENTS.md
new file mode 120000
index 0000000..2ffdcf5
--- /dev/null
+++ b/AGENTS.md
@@ -0,0 +1 @@
+../codex-agentic-ai-pipeline/AGENTS.md
\ No newline at end of file
diff --git a/ai/agentic-pipeline/turns/1/adr.md b/ai/agentic-pipeline/turns/1/adr.md
new file mode 100644
index 0000000..5c0e1fd
--- /dev/null
+++ b/ai/agentic-pipeline/turns/1/adr.md
@@ -0,0 +1,26 @@
+# Architecture Decision Record
+
+MySQL DDL generation for CustomerProfile schema
+
+**Turn**: 1
+
+**Status**: Accepted
+
+**Date**: 2025-10-22 - 05:33
+
+**Context**
+The task requires producing normalized SQL assets from the CustomerProfile JSON schema while the user configuration specifies the MySQL dialect. Existing task guidance referenced PostgreSQL, leading to a dialect conflict that needed resolution.
+
+**Options Considered**
+1. Follow task markdown literally and emit PostgreSQL 16 statements.
+2. Honor the user-provided MySQL configuration while aligning with normalization and indexing expectations.
+
+**Decision**
+Proceed with MySQL 8-compatible DDL that satisfies the schema’s requirements and mirrors the normalization practices outlined in the task guidance. This preserves user intent and still fulfills governance expectations.
+
+**Result**
+Generated `db/migrations/01_customer_profile_tables.sql`, `db/scripts/customer_profile_test_data.sql`, and supporting documentation describing execution against MySQL.
+
+**Consequences**
+- Positive: The produced assets are immediately usable in MySQL environments, matching the requested configuration.
+- Negative: Divergence from the PostgreSQL examples may require future updates to align shared documentation with dialect-specific nuances.
diff --git a/ai/agentic-pipeline/turns/1/changelog.md b/ai/agentic-pipeline/turns/1/changelog.md
new file mode 100644
index 0000000..9c395e0
--- /dev/null
+++ b/ai/agentic-pipeline/turns/1/changelog.md
@@ -0,0 +1,47 @@
+# Turn: 1 – 2025-10-22 - 05:33 UTC
+
+## Statement of Work
+
+Generated MySQL DDL and deterministic seed data for the CustomerProfile domain based on the provided JSON schema. Established supporting project documentation, repository hygiene, and governance artifacts for Turn 1.
+
+## Input Prompt
+
+execute turn 1 config: mysql jason_schema: CustomerProfile domain schema (provided in task prompt)
+
+## Tasks Executed
+
+| Task Name | Tools / Agents Executed |
+| --------- | ----------------------- |
+| TASK 01 – Initialize Project | shell |
+| TASK – Generate Normalized Tables | shell |
+| TASK – Generate Test Data | shell |
+
+## Turn Files Added
+
+| Path / File |
+| ----------- |
+| ai/agentic-pipeline/turns/1/changelog.md |
+| ai/agentic-pipeline/turns/1/adr.md |
+| ai/agentic-pipeline/turns/1/manifest.json |
+| ai/agentic-pipeline/turns/1/session_context_values.md |
+| ai/agentic-pipeline/turns/1/diff.patch |
+
+## Files Added
+
+| Path / File | Task Name |
+| ----------- | --------- |
+| .gitignore | TASK 01 – Initialize Project |
+| AGENTS.md | TASK 01 – Initialize Project |
+| db/migrations/01_customer_profile_tables.sql | TASK – Generate Normalized Tables |
+| db/README.md | TASK – Generate Normalized Tables |
+| db/scripts/customer_profile_test_data.sql | TASK – Generate Test Data |
+| ai/agentic-pipeline/turns_index.csv | TASK 01 – Initialize Project |
+
+## Files Updated
+
+| Path / File | Task Name |
+| ----------- | --------- |
+| ai/agentic-pipeline/turns/1/changelog.md | TASK 01 – Initialize Project |
+| ai/agentic-pipeline/turns/1/adr.md | TASK – Generate Normalized Tables |
+| ai/agentic-pipeline/turns/1/manifest.json | TASK – Generate Normalized Tables |
+| ai/agentic-pipeline/turns/1/session_context_values.md | TASK 01 – Initialize Project |
diff --git a/ai/agentic-pipeline/turns/1/diff.patch b/ai/agentic-pipeline/turns/1/diff.patch
new file mode 100644
index 0000000..4c618e8
--- /dev/null
+++ b/ai/agentic-pipeline/turns/1/diff.patch
@@ -0,0 +1,124 @@
+diff --git a/.gitignore b/.gitignore
+new file mode 100644
+index 0000000..273ee2d
+--- /dev/null
++++ b/.gitignore
+@@ -0,0 +1,25 @@
++# Binaries and build artifacts
++/build/
++/dist/
++*.log
++*.tmp
++*.swp
++
++# Python
++__pycache__/
++*.py[cod]
++.venv/
++
++# Node
++node_modules/
++
++# Environment
++.env
++.env.*
++
++# macOS
++.DS_Store
++
++# Editor settings
++.idea/
++.vscode/
+diff --git a/AGENTS.md b/AGENTS.md
+new file mode 120000
+index 0000000..2ffdcf5
+--- /dev/null
++++ b/AGENTS.md
+@@ -0,0 +1 @@
++../codex-agentic-ai-pipeline/AGENTS.md
+\ No newline at end of file
+diff --git a/ai/agentic-pipeline/turns/1/adr.md b/ai/agentic-pipeline/turns/1/adr.md
+new file mode 100644
+index 0000000..5c0e1fd
+--- /dev/null
++++ b/ai/agentic-pipeline/turns/1/adr.md
+@@ -0,0 +1,26 @@
++# Architecture Decision Record
++
++MySQL DDL generation for CustomerProfile schema
++
++**Turn**: 1
++
++**Status**: Accepted
++
++**Date**: 2025-10-22 - 05:33
++
++**Context**
++The task requires producing normalized SQL assets from the CustomerProfile JSON schema while the user configuration specifies the MySQL dialect. Existing task guidance referenced PostgreSQL, leading to a dialect conflict that needed resolution.
++
++**Options Considered**
++1. Follow task markdown literally and emit PostgreSQL 16 statements.
++2. Honor the user-provided MySQL configuration while aligning with normalization and indexing expectations.
++
++**Decision**
++Proceed with MySQL 8-compatible DDL that satisfies the schema’s requirements and mirrors the normalization practices outlined in the task guidance. This preserves user intent and still fulfills governance expectations.
++
++**Result**
++Generated `db/migrations/01_customer_profile_tables.sql`, `db/scripts/customer_profile_test_data.sql`, and supporting documentation describing execution against MySQL.
++
++**Consequences**
++- Positive: The produced assets are immediately usable in MySQL environments, matching the requested configuration.
++- Negative: Divergence from the PostgreSQL examples may require future updates to align shared documentation with dialect-specific nuances.
+diff --git a/ai/agentic-pipeline/turns/1/changelog.md b/ai/agentic-pipeline/turns/1/changelog.md
+new file mode 100644
+index 0000000..9c395e0
+--- /dev/null
++++ b/ai/agentic-pipeline/turns/1/changelog.md
+@@ -0,0 +1,47 @@
++# Turn: 1 – 2025-10-22 - 05:33 UTC
++
++## Statement of Work
++
++Generated MySQL DDL and deterministic seed data for the CustomerProfile domain based on the provided JSON schema. Established supporting project documentation, repository hygiene, and governance artifacts for Turn 1.
++
++## Input Prompt
++
++execute turn 1 config: mysql jason_schema: CustomerProfile domain schema (provided in task prompt)
++
++## Tasks Executed
++
++| Task Name | Tools / Agents Executed |
++| --------- | ----------------------- |
++| TASK 01 – Initialize Project | shell |
++| TASK – Generate Normalized Tables | shell |
++| TASK – Generate Test Data | shell |
++
++## Turn Files Added
++
++| Path / File |
++| ----------- |
++| ai/agentic-pipeline/turns/1/changelog.md |
++| ai/agentic-pipeline/turns/1/adr.md |
++| ai/agentic-pipeline/turns/1/manifest.json |
++| ai/agentic-pipeline/turns/1/session_context_values.md |
++| ai/agentic-pipeline/turns/1/diff.patch |
++
++## Files Added
++
++| Path / File | Task Name |
++| ----------- | --------- |
++| .gitignore | TASK 01 – Initialize Project |
++| AGENTS.md | TASK 01 – Initialize Project |
++| db/migrations/01_customer_profile_tables.sql | TASK – Generate Normalized Tables |
++| db/README.md | TASK – Generate Normalized Tables |
++| db/scripts/customer_profile_test_data.sql | TASK – Generate Test Data |
++| ai/agentic-pipeline/turns_index.csv | TASK 01 – Initialize Project |
++
++## Files Updated
++
++| Path / File | Task Name |
++| ----------- | --------- |
++| ai/agentic-pipeline/turns/1/changelog.md | TASK 01 – Initialize Project |
++| ai/agentic-pipeline/turns/1/adr.md | TASK – Generate Normalized Tables |
++| ai/agentic-pipeline/turns/1/manifest.json | TASK – Generate Normalized Tables |
++| ai/agentic-pipeline/turns/1/session_context_values.md | TASK 01 – Initi
\ No newline at end of file
diff --git a/ai/agentic-pipeline/turns/1/manifest.json b/ai/agentic-pipeline/turns/1/manifest.json
new file mode 100644
index 0000000..e00439e
--- /dev/null
+++ b/ai/agentic-pipeline/turns/1/manifest.json
@@ -0,0 +1,56 @@
+{
+  "turnId": 1,
+  "timestampUtc": "2025-10-22T05:33:06Z",
+  "actor": {
+    "initiator": "user",
+    "agent": "codex@1.0.0"
+  },
+  "task": {
+    "name": "execute-turn-1",
+    "inputs": [
+      "ai/context/customer.schema.json"
+    ],
+    "parameters": {
+      "dialect": "mysql"
+    }
+  },
+  "artifacts": {
+    "changelog": "changelog.md",
+    "adr": "adr.md",
+    "diff": "diff.patch",
+    "logs": [],
+    "reports": []
+  },
+  "changes": {
+    "added": [
+      ".gitignore",
+      "AGENTS.md",
+      "db/migrations/01_customer_profile_tables.sql",
+      "db/README.md",
+      "db/scripts/customer_profile_test_data.sql",
+      "ai/agentic-pipeline/turns_index.csv",
+      "ai/agentic-pipeline/turns/1/changelog.md",
+      "ai/agentic-pipeline/turns/1/adr.md",
+      "ai/agentic-pipeline/turns/1/session_context_values.md",
+      "ai/agentic-pipeline/turns/1/manifest.json",
+      "ai/agentic-pipeline/turns/1/diff.patch"
+    ],
+    "modified": [],
+    "deleted": []
+  },
+  "metrics": {
+    "filesChanged": 11,
+    "linesAdded": 511,
+    "linesDeleted": 0,
+    "testsPassed": 0,
+    "testsFailed": 0,
+    "coverageDeltaPct": 0.0,
+    "schemaHash": "c7a983e8d71ba82a024e7457a43859e6a28d00f633960ed803bbc498c38670b0"
+  },
+  "validation": {
+    "adrPresent": true,
+    "changelogPresent": true,
+    "lintStatus": "not-run",
+    "testsStatus": "not-run"
+  }
+}
diff --git a/ai/agentic-pipeline/turns/1/session_context_values.md b/ai/agentic-pipeline/turns/1/session_context_values.md
new file mode 100644
index 0000000..a03bb72
--- /dev/null
+++ b/ai/agentic-pipeline/turns/1/session_context_values.md
@@ -0,0 +1,6 @@
+# Session Context Values
+
+- turn_id: 1
+- config.target_dialect: mysql
+- json_schema.title: CustomerProfile
+- json_schema.required: id, firstName, lastName, emails, privacySettings
diff --git a/ai/agentic-pipeline/turns_index.csv b/ai/agentic-pipeline/turns_index.csv
new file mode 100644
index 0000000..e33002d
--- /dev/null
+++ b/ai/agentic-pipeline/turns_index.csv
@@ -0,0 +1,2 @@
+turnId,timestampUtc,task,branch,tag,headAfter,testsPassed,testsFailed,coverageDeltaPct
+1,2025-10-22T05:33:06Z,execute-turn-1,work,turn/1,pending,0,0,0.0
diff --git a/db/README.md b/db/README.md
new file mode 100644
index 0000000..451868f
--- /dev/null
+++ b/db/README.md
@@ -0,0 +1,52 @@
+<!--
+/**
+ * App: SQL Generation Agent
+ * Package: db
+ * File: db/README.md
+ * Version: 0.1.0
+ * Turns: 1
+ * Author: AI Coding Agent
+ * Date: 2025-10-22T05:33:06Z
+ * Exports: Documentation for database migrations and seed scripts
+ * Description: Provides instructions for executing customer_profile migrations and verifying generated assets.
+ */
+-->
+
+# Database Artifacts
+
+## Domain Migration
+
+1. Ensure a MySQL 8.0+ instance is available and accessible.
+2. Create the `customer_profile` schema if it does not already exist:
+   ```sql
+   CREATE DATABASE IF NOT EXISTS customer_profile;
+   ```
+3. Apply the migration:
+   ```bash
+   MYSQL_PWD=<PASSWORD> mysql --host <HOST> --user <USER> --database customer_profile < db/migrations/01_customer_profile_tables.sql
+   ```
+4. Validate that the objects exist:
+   ```sql
+   SELECT table_name
+   FROM information_schema.tables
+   WHERE table_schema = 'customer_profile';
+   ```
+
+## Smoke Tests
+
+1. Load the deterministic test data:
+   ```bash
+   MYSQL_PWD=<PASSWORD> mysql --host <HOST> --user <USER> --database customer_profile < db/scripts/customer_profile_test_data.sql
+   ```
+2. Confirm the dataset populated successfully:
+   ```sql
+   SELECT COUNT(*) AS customer_count
+   FROM customer_profile.customer;
+   ```
+3. Inspect the reporting view to verify joins:
+   ```sql
+   SELECT customer_id, email, phone_number
+   FROM customer_profile.vw_customer_overview
+   ORDER BY customer_id
+   LIMIT 10;
+   ```
diff --git a/db/migrations/01_customer_profile_tables.sql b/db/migrations/01_customer_profile_tables.sql
new file mode 100644
index 0000000..292092c
--- /dev/null
+++ b/db/migrations/01_customer_profile_tables.sql
@@ -0,0 +1,104 @@
+/**
+ * App: SQL Generation Agent
+ * Package: db.migrations
+ * File: db/migrations/01_customer_profile_tables.sql
+ * Version: 0.1.0
+ * Turns: 1
+ * Author: AI Coding Agent
+ * Date: 2025-10-22T05:33:06Z
+ * Exports: Tables customer_profile.postal_address, customer_profile.privacy_settings, customer_profile.customer, customer_profile.customer_email, customer_profile.customer_phone_number; View customer_profile.vw_customer_overview
+ * Description: Creates the customer_profile schema, normalized tables, supporting indexes, and a reporting view derived from the CustomerProfile JSON schema.
+ */
+
+CREATE SCHEMA IF NOT EXISTS customer_profile;
+
+CREATE TABLE IF NOT EXISTS customer_profile.postal_address (
+    postal_address_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
+    line1             VARCHAR(255) NOT NULL,
+    line2             VARCHAR(255) NULL,
+    city              VARCHAR(120) NOT NULL,
+    state             VARCHAR(120) NOT NULL,
+    postal_code       VARCHAR(20) NOT NULL,
+    country           CHAR(2)      NOT NULL,
+    CONSTRAINT chk_postal_address_country_format CHECK (country REGEXP '^[A-Z]{2}$')
+) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
+
+CREATE TABLE IF NOT EXISTS customer_profile.privacy_settings (
+    privacy_settings_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
+    marketing_emails_enabled TINYINT(1) NOT NULL,
+    two_factor_enabled       TINYINT(1) NOT NULL
+) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
+
+CREATE TABLE IF NOT EXISTS customer_profile.customer (
+    customer_id           CHAR(36) NOT NULL,
+    first_name            VARCHAR(255) NOT NULL,
+    middle_name           VARCHAR(255) NULL,
+    last_name             VARCHAR(255) NOT NULL,
+    postal_address_id     BIGINT UNSIGNED NULL,
+    privacy_settings_id   BIGINT UNSIGNED NOT NULL,
+    PRIMARY KEY (customer_id),
+    CONSTRAINT fk_customer_postal_address
+        FOREIGN KEY (postal_address_id) REFERENCES customer_profile.postal_address (postal_address_id)
+        ON UPDATE CASCADE ON DELETE SET NULL,
+    CONSTRAINT fk_customer_privacy_settings
+        FOREIGN KEY (privacy_settings_id) REFERENCES customer_profile.privacy_settings (privacy_settings_id)
+        ON UPDATE CASCADE ON DELETE RESTRICT,
+    INDEX idx_customer_last_name (last_name),
+    INDEX idx_customer_postal_address_id (postal_address_id),
+    INDEX idx_customer_privacy_settings_id (privacy_settings_id)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
+
+CREATE TABLE IF NOT EXISTS customer_profile.customer_email (
+    customer_email_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
+    customer_id       CHAR(36) NOT NULL,
+    email             VARCHAR(320) NOT NULL,
+    created_at        TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    CONSTRAINT fk_customer_email_customer
+        FOREIGN KEY (customer_id) REFERENCES customer_profile.customer (customer_id)
+        ON UPDATE CASCADE ON DELETE CASCADE,
+    CONSTRAINT uq_customer_email_customer UNIQUE (customer_id, email),
+    INDEX idx_customer_email_customer_id (customer_id),
+    INDEX idx_customer_email_address (email)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
+
+CREATE TABLE IF NOT EXISTS customer_profile.customer_phone_number (
+    customer_phone_number_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
+    customer_id              CHAR(36) NOT NULL,
+    phone_type               ENUM('mobile', 'home', 'work', 'other') NOT NULL,
+    phone_number             VARCHAR(20) NOT NULL,
+    created_at               TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    CONSTRAINT fk_customer_phone_customer
+        FOREIGN KEY (customer_id) REFERENCES customer_profile.customer (customer_id)
+        ON UPDATE CASCADE ON DELETE CASCADE,
+    CONSTRAINT uq_customer_phone UNIQUE (customer_id, phone_number),
+    INDEX idx_customer_phone_customer_id (customer_id),
+    INDEX idx_customer_phone_number (phone_number),
+    CONSTRAINT chk_customer_phone_number_format CHECK (phone_number REGEXP '^[+][1-9][0-9]{1,14}$')
+) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
+
+CREATE OR REPLACE VIEW customer_profile.vw_customer_overview AS
+SELECT
+    c.customer_id,
+    c.first_name,
+    c.middle_name,
+    c.last_name,
+    pa.line1         AS address_line1,
+    pa.line2         AS address_line2,
+    pa.city          AS address_city,
+    pa.state         AS address_state,
+    pa.postal_code   AS address_postal_code,
+    pa.country       AS address_country,
+    ps.marketing_emails_enabled,
+    ps.two_factor_enabled,
+    ce.email,
+    cpn.phone_type,
+    cpn.phone_number
+FROM customer_profile.customer AS c
+LEFT JOIN customer_profile.postal_address AS pa
+    ON c.postal_address_id = pa.postal_address_id
+LEFT JOIN customer_profile.privacy_settings AS ps
+    ON c.privacy_settings_id = ps.privacy_settings_id
+LEFT JOIN customer_profile.customer_email AS ce
+    ON c.customer_id = ce.customer_id
+LEFT JOIN customer_profile.customer_phone_number AS cpn
+    ON c.customer_id = cpn.customer_id;
diff --git a/db/scripts/customer_profile_test_data.sql b/db/scripts/customer_profile_test_data.sql
new file mode 100644
index 0000000..f3df505
--- /dev/null
+++ b/db/scripts/customer_profile_test_data.sql
@@ -0,0 +1,156 @@
+/**
+ * App: SQL Generation Agent
+ * Package: db.scripts
+ * File: db/scripts/customer_profile_test_data.sql
+ * Version: 0.1.0
+ * Turns: 1
+ * Author: AI Coding Agent
+ * Date: 2025-10-22T05:33:06Z
+ * Exports: Deterministic seed data for customer_profile tables
+ * Description: Populates postal addresses, privacy settings, customers, emails, and phone numbers with idempotent statements.
+ */
+
+-- All timestamps and generated dates use UTC.
+SET time_zone = '+00:00';
+
+USE customer_profile;
+
+INSERT INTO customer_profile.postal_address (postal_address_id, line1, line2, city, state, postal_code, country)
+VALUES
+    (1, '100 Market Street', NULL, 'Springfield', 'IL', '62701', 'US'),
+    (2, '200 Oak Avenue', 'Apt 2B', 'Madison', 'WI', '53703', 'US'),
+    (3, '300 Pine Road', NULL, 'Austin', 'TX', '73301', 'US'),
+    (4, '400 Maple Lane', NULL, 'Denver', 'CO', '80014', 'US'),
+    (5, '500 Cedar Boulevard', 'Suite 5', 'Phoenix', 'AZ', '85001', 'US'),
+    (6, '600 Birch Way', NULL, 'Portland', 'OR', '97205', 'US'),
+    (7, '700 Walnut Street', NULL, 'Boston', 'MA', '02108', 'US'),
+    (8, '800 Chestnut Drive', NULL, 'Seattle', 'WA', '98101', 'US'),
+    (9, '900 Elm Circle', NULL, 'Atlanta', 'GA', '30303', 'US'),
+    (10, '1000 Ash Place', NULL, 'Miami', 'FL', '33101', 'US'),
+    (11, '1100 Poplar Street', NULL, 'Columbus', 'OH', '43085', 'US'),
+    (12, '1200 Willow Court', 'Unit 12', 'Charlotte', 'NC', '28202', 'US'),
+    (13, '1300 Fir Terrace', NULL, 'Boise', 'ID', '83702', 'US'),
+    (14, '1400 Hickory Lane', NULL, 'Nashville', 'TN', '37201', 'US'),
+    (15, '1500 Sycamore Avenue', NULL, 'Omaha', 'NE', '68102', 'US'),
+    (16, '1600 Larch Road', NULL, 'Minneapolis', 'MN', '55401', 'US'),
+    (17, '1700 Juniper Way', NULL, 'San Diego', 'CA', '92101', 'US'),
+    (18, '1800 Redwood Street', NULL, 'Salt Lake City', 'UT', '84101', 'US'),
+    (19, '1900 Aspen Drive', NULL, 'Boulder', 'CO', '80302', 'US'),
+    (20, '2000 Spruce Trail', NULL, 'Richmond', 'VA', '23219', 'US')
+ON DUPLICATE KEY UPDATE
+    line1 = VALUES(line1),
+    line2 = VALUES(line2),
+    city = VALUES(city),
+    state = VALUES(state),
+    postal_code = VALUES(postal_code),
+    country = VALUES(country);
+
+INSERT INTO customer_profile.privacy_settings (privacy_settings_id, marketing_emails_enabled, two_factor_enabled)
+VALUES
+    (1, 1, 0),
+    (2, 0, 1),
+    (3, 1, 1),
+    (4, 0, 0),
+    (5, 1, 0),
+    (6, 0, 1),
+    (7, 1, 1),
+    (8, 0, 0),
+    (9, 1, 0),
+    (10, 0, 1),
+    (11, 1, 1),
+    (12, 0, 0),
+    (13, 1, 0),
+    (14, 0, 1),
+    (15, 1, 1),
+    (16, 0, 0),
+    (17, 1, 0),
+    (18, 0, 1),
+    (19, 1, 1),
+    (20, 0, 0)
+ON DUPLICATE KEY UPDATE
+    marketing_emails_enabled = VALUES(marketing_emails_enabled),
+    two_factor_enabled = VALUES(two_factor_enabled);
+
+INSERT INTO customer_profile.customer (customer_id, first_name, middle_name, last_name, postal_address_id, privacy_settings_id)
+VALUES
+    ('11111111-1111-1111-1111-111111111111', 'Alice', NULL, 'Smith', 1, 1),
+    ('22222222-2222-2222-2222-222222222222', 'Benjamin', 'T', 'Lopez', 2, 2),
+    ('33333333-3333-3333-3333-333333333333', 'Charlotte', NULL, 'Nguyen', 3, 3),
+    ('44444444-4444-4444-4444-444444444444', 'Diego', 'R', 'Martinez', 4, 4),
+    ('55555555-5555-5555-5555-555555555555', 'Elena', NULL, 'Khan', 5, 5),
+    ('66666666-6666-6666-6666-666666666666', 'Finn', NULL, 'Anders', 6, 6),
+    ('77777777-7777-7777-7777-777777777777', 'Grace', 'L', 'Baker', 7, 7),
+    ('88888888-8888-8888-8888-888888888888', 'Hannah', NULL, 'Chen', 8, 8),
+    ('99999999-9999-9999-9999-999999999999', 'Isaac', 'M', 'Diaz', 9, 9),
+    ('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', 'Jasmine', NULL, 'Edwards', 10, 10),
+    ('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb', 'Kamal', 'N', 'Foster', 11, 11),
+    ('cccccccc-cccc-cccc-cccc-cccccccccccc', 'Lena', NULL, 'Garcia', 12, 12),
+    ('dddddddd-dddd-dddd-dddd-dddddddddddd', 'Maya', NULL, 'Hughes', 13, 13),
+    ('eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee', 'Noah', 'P', 'Ingram', 14, 14),
+    ('ffffffff-ffff-ffff-ffff-ffffffffffff', 'Olivia', NULL, 'Jenkins', 15, 15),
+    ('11111111-aaaa-bbbb-cccc-222222222222', 'Parker', NULL, 'Kim', 16, 16),
+    ('22222222-bbbb-cccc-dddd-333333333333', 'Quinn', 'S', 'Larson', 17, 17),
+    ('33333333-cccc-dddd-eeee-444444444444', 'Riley', NULL, 'Mendez', 18, 18),
+    ('44444444-dddd-eeee-ffff-555555555555', 'Sofia', NULL, 'Nolan', 19, 19),
+    ('55555555-eeee-ffff-aaaa-666666666666', 'Tristan', 'V', 'Owens', 20, 20)
+ON DUPLICATE KEY UPDATE
+    first_name = VALUES(first_name),
+    middle_name = VALUES(middle_name),
+    last_name = VALUES(last_name),
+    postal_address_id = VALUES(postal_address_id),
+    privacy_settings_id = VALUES(privacy_settings_id);
+
+INSERT INTO customer_profile.customer_email (customer_id, email)
+VALUES
+    ('11111111-1111-1111-1111-111111111111', 'alice.smith@example.com'),
+    ('22222222-2222-2222-2222-222222222222', 'benjamin.lopez@example.com'),
+    ('33333333-3333-3333-3333-333333333333', 'charlotte.nguyen@example.com'),
+    ('44444444-4444-4444-4444-444444444444', 'diego.martinez@example.com'),
+    ('55555555-5555-5555-5555-555555555555', 'elena.khan@example.com'),
+    ('66666666-6666-6666-6666-666666666666', 'finn.anders@example.com'),
+    ('77777777-7777-7777-7777-777777777777', 'grace.baker@example.com'),
+    ('88888888-8888-8888-8888-888888888888', 'hannah.chen@example.com'),
+    ('99999999-9999-9999-9999-999999999999', 'isaac.diaz@example.com'),
+    ('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', 'jasmine.edwards@example.com'),
+    ('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb', 'kamal.foster@example.com'),
+    ('cccccccc-cccc-cccc-cccc-cccccccccccc', 'lena.garcia@example.com'),
+    ('dddddddd-dddd-dddd-dddd-dddddddddddd', 'maya.hughes@example.com'),
+    ('eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee', 'noah.ingram@example.com'),
+    ('ffffffff-ffff-ffff-ffff-ffffffffffff', 'olivia.jenkins@example.com'),
+    ('11111111-aaaa-bbbb-cccc-222222222222', 'parker.kim@example.com'),
+    ('22222222-bbbb-cccc-dddd-333333333333', 'quinn.larson@example.com'),
+    ('33333333-cccc-dddd-eeee-444444444444', 'riley.mendez@example.com'),
+    ('44444444-dddd-eeee-ffff-555555555555', 'sofia.nolan@example.com'),
+    ('55555555-eeee-ffff-aaaa-666666666666', 'tristan.owens@example.com')
+ON DUPLICATE KEY UPDATE
+    email = VALUES(email);
+
+INSERT INTO customer_profile.customer_phone_number (customer_id, phone_type, phone_number)
+VALUES
+    ('11111111-1111-1111-1111-111111111111', 'mobile', '+13175550001'),
+    ('22222222-2222-2222-2222-222222222222', 'mobile', '+16085550002'),
+    ('33333333-3333-3333-3333-333333333333', 'mobile', '+15125550003'),
+    ('44444444-4444-4444-4444-444444444444', 'mobile', '+13035550004'),
+    ('55555555-5555-5555-5555-555555555555', 'mobile', '+16025550005'),
+    ('66666666-6666-6666-6666-666666666666', 'work', '+15035550006'),
+    ('77777777-7777-7777-7777-777777777777', 'mobile', '+16175550007'),
+    ('88888888-8888-8888-8888-888888888888', 'home', '+12065550008'),
+    ('99999999-9999-9999-9999-999999999999', 'mobile', '+14045550009'),
+    ('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', 'mobile', '+13055550010'),
+    ('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb', 'mobile', '+16145550011'),
+    ('cccccccc-cccc-cccc-cccc-cccccccccccc', 'work', '+17025550012'),
+    ('dddddddd-dddd-dddd-dddd-dddddddddddd', 'mobile', '+12085550013'),
+    ('eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee', 'mobile', '+16155550014'),
+    ('ffffffff-ffff-ffff-ffff-ffffffffffff', 'mobile', '+14065550015'),
+    ('11111111-aaaa-bbbb-cccc-222222222222', 'mobile', '+16125550016'),
+    ('22222222-bbbb-cccc-dddd-333333333333', 'work', '+16195550017'),
+    ('33333333-cccc-dddd-eeee-444444444444', 'mobile', '+18015550018'),
+    ('44444444-dddd-eeee-ffff-555555555555', 'mobile', '+13095550019'),
+    ('55555555-eeee-ffff-aaaa-666666666666', 'other', '+18005550020')
+ON DUPLICATE KEY UPDATE
+    phone_type = VALUES(phone_type),
+    phone_number = VALUES(phone_number);
+
+-- Smoke-test query
+SELECT COUNT(*) AS customer_count
+FROM customer_profile.customer;
